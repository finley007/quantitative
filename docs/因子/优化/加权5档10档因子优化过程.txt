Total time: 561.285 s
File: D:\liuli\workspace\quantitative\code\factor\base_factor.py
Function: caculate_by_date at line 174

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   174                                               @profile
   175                                               def caculate_by_date(self, *args):
   176                                                   """
   177                                                   按天计算
   178                                                   Parameters
   179                                                   ----------
   180                                                   args
   181
   182                                                   Returns
   183                                                   -------
   184
   185                                                   """
   186         1          1.2      1.2      0.0          date = args[0][0]
   187         1          0.2      0.2      0.0          instrument = args[0][1]
   188         1          0.3      0.3      0.0          product = args[0][2]
   189         1       2735.3   2735.3      0.0          get_logger().debug(f'Caculate by date params {date}, {instrument}, {product}')
   196         1          0.5      0.5      0.0          if stock_list and len(stock_list) > 0:
   197                                                       # 过滤异常数据
   198         1        228.6    228.6      0.0              stock_list = list(filter(lambda stock: (date + stock) not in self._invalid_set, stock_list))
   199       476        359.5      0.8      0.0              for stock in stock_list:
   200       476    1299177.7   2729.4      0.2                  get_logger().debug('Handle stock {0}'.format(stock))
   201       476         98.4      0.2      0.0                  try:
   202       476    6916224.7  14529.9      1.2                      daily_stock_data = self.get_stock_data(date, stock)
   203                                                           except Exception as e:
   204                                                               get_logger().warning('Stock data is missing for date: {0} and stock: {1}'.format(date, stock))
   205                                                               # session = create_session()
   206                                                               # stock_missing_data = StockMissingData(date, stock)
   207                                                               # session.add(stock_missing_data)
   208                                                               # session.commit()
   209                                                               continue
   210       476       3843.5      8.1      0.0                  if len(daily_stock_data) == 0:
   211                                                               get_logger().warning('Stock data is empty for date: {0} and stock: {1}'.format(date, stock))
   212                                                               continue
   213       476    1140118.4   2395.2      0.2                  daily_stock_data = daily_stock_data.loc[:, columns]
   214       476     606857.2   1274.9      0.1                  daily_stock_data = daily_stock_data[daily_stock_data['time'] > add_milliseconds_suffix(STOCK_TRANSACTION_START_TIME)]
   215       476  273963417.5 575553.4     48.8                  daily_stock_data['10_grade_ask_commission_amount'] = daily_stock_data.apply(lambda item: self.amount_sum(item, 'ask'), axis=1)
   216       476  273500107.9 574580.1     48.7                  daily_stock_data['10_grade_bid_commission_amount'] = daily_stock_data.apply(lambda item: self.amount_sum(item, 'bid'), axis=1)
   217       476     207258.3    435.4      0.0                  daily_stock_data['10_grade_total_commission_amount'] = daily_stock_data['10_grade_ask_commission_amount'] + daily_stock_data['10_grade_bid_commission_amount']
   218       476        487.5      1.0      0.0                  temp_data_cache.append(daily_stock_data)
   219                                                   else:
   220                                                       get_logger().warning(
   221                                                           'Stock data configuration is missing for product: {0} and date: {1}'.format(product, date))
   222         1          0.3      0.3      0.0          if len(temp_data_cache) > 0:
   223         1    1548321.4 1548321.4      0.3              stock_data_per_date = pd.concat(temp_data_cache)
   224         1    1025023.0 1025023.0      0.2              stock_data_per_date = stock_data_per_date.reset_index(drop=True)
   225         1         12.4     12.4      0.0          if len(stock_data_per_date) == 0:
   226                                                       get_logger().warning('The data on date: {0} and instrument: {1} is missing'.format(date, instrument))
   227                                                       return date, stock_data_per_date
   228         1    1065288.8 1065288.8      0.2          return self.execute_caculation(date, stock_data_per_date)


 daily_stock_data[['10_grade_ask_commission_amount', '10_grade_bid_commission_amount']] = np.apply_along_axis(lambda item:self.amount_sum(item),axis=1,arr=daily_stock_data.values)

  columns = columns + ['bid_price1', 'bid_price2', 'bid_price3', 'bid_price4', 'bid_price5', 'bid_price6', 'bid_price7', 'bid_price8', 'bid_price9', 'bid_price10', 'bid_volume1', 'bid_volume2', 'bid_volume3', 'bid_volume4', 'bid_volume5', 'bid_volume6', 'bid_volume7', 'bid_volume8', 'bid_volume9', 'bid_v
olume10',
+                             'ask_price1', 'ask_price2', 'ask_price3', 'ask_price4', 'ask_price5', 'ask_price6', 'ask_price7', 'ask_price8', 'ask_price9', 'ask_price10', 'ask_volume1', 'ask_volume2', 'ask_volume3', 'ask_volume4', 'ask_volume5', 'ask_volume6', 'ask_volume7', 'ask_volume8', 'ask_volume9', 'ask_v
olume10']


weighted_list = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
        return np.dot(item[3:13] * item[13:23], weighted_list), np.dot(item[23:33] * item[33:43], weighted_list)


Total time: 33.4011 s
File: D:\liuli\workspace\quantitative\code\factor\base_factor.py
Function: caculate_by_date at line 174

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   174                                               @profile
   175                                               def caculate_by_date(self, *args):
   176                                                   """
   177                                                   按天计算
   178                                                   Parameters
   179                                                   ----------
   180                                                   args
   181
   182                                                   Returns
   183                                                   -------
   184
   185                                                   """
   186         1          1.1      1.1      0.0          date = args[0][0]
   187         1          0.6      0.6      0.0          instrument = args[0][1]
   188         1          0.2      0.2      0.0          product = args[0][2]
   189         1       2555.1   2555.1      0.0          get_logger().debug(f'Caculate by date params {date}, {instrument}, {product}')
   190         1       2998.6   2998.6      0.0          stock_list = self.get_stock_list_by_date(product, date)
   191         1          1.0      1.0      0.0          if len(self._stock_filter) > 0:  # 用于生成人工检测文件
   192                                                       stock_list = self._stock_filter
   193         1          6.5      6.5      0.0          columns = self.get_columns()
   194         1       2157.9   2157.9      0.0          data = pd.DataFrame(columns=columns)
   213       476     686344.2   1441.9      2.1                  daily_stock_data = daily_stock_data.loc[:, columns]
   214       476     548610.1   1152.5      1.6                  daily_stock_data = daily_stock_data[daily_stock_data['time'] > add_milliseconds_suffix(STOCK_TRANSACTION_START_TIME)]
   215       476   19857967.2  41718.4     59.5                  daily_stock_data[['10_grade_ask_commission_amount', '10_grade_bid_commission_amount']] = np.apply_along_axis(
   216       476     906124.3   1903.6      2.7                      lambda item: self.amount_sum(item), axis=1, arr=daily_stock_data.values)
   217       476     219712.1    461.6      0.7                  daily_stock_data['10_grade_total_commission_amount'] = daily_stock_data['10_grade_ask_commission_amount'] + daily_stock_data['10_grade_bid_commission_amount']
   218       476        449.5      0.9      0.0                  temp_data_cache.append(daily_stock_data)
   219                                                   else:
   220                                                       get_logger().warning(
   221                                                           'Stock data configuration is missing for product: {0} and date: {1}'.format(product, date))
   222         1          0.5      0.5      0.0          if len(temp_data_cache) > 0:
   223         1     875909.7 875909.7      2.6              stock_data_per_date = pd.concat(temp_data_cache)
   224         1    1013730.6 1013730.6      3.0              stock_data_per_date = stock_data_per_date.reset_index(drop=True)
   225         1         12.6     12.6      0.0          if len(stock_data_per_date) == 0:
   226                                                       get_logger().warning('The data on date: {0} and instrument: {1} is missing'.format(date, instrument))
   227                                                       return date, stock_data_per_date
   228         1     989544.9 989544.9      3.0          return self.execute_caculation(date, stock_data_per_date)
